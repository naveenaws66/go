package main

import (
	"encoding/json"
	"log"
	"net/http"
	"time"
)

func main() {
	// routes
	mux := http.NewServeMux()

	mux.HandleFunc("/api/time", printTimeInZone)

	// router
	log.Fatal(http.ListenAndServe(":8080", mux))
}

// Struct to hold the current time
type current struct {
	CurrentTime string `json:"current_time"`
}

func printTimeInZone(w http.ResponseWriter, r *http.Request) {
	// Default timezone
	timezone := "America/New_York"

	// Check if the timezone is provided as a query parameter
	queryTimezone := r.URL.Query().Get("timezone")
	if queryTimezone != "" {
		timezone = queryTimezone
	}

	loc, err := time.LoadLocation(timezone)
	if err != nil {
		http.Error(w, "Invalid timezone", http.StatusBadRequest)
		return
	}

	// Create current time struct
	ct := current{
		CurrentTime: time.Now().In(loc).Format("2006-01-02 15:04:05 Z0700 MST"),
	}

	// Set response header
	w.Header().Set("Content-Type", "application/json")

	// Encode and write response
	if err := json.NewEncoder(w).Encode(ct); err != nil {
		http.Error(w, "Failed to encode response", http.StatusInternalServerError)
		return
	}
}
